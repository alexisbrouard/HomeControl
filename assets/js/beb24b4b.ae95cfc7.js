"use strict";(self.webpackChunkhome_control=self.webpackChunkhome_control||[]).push([[3127],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return m}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),c=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return n?t.createElement(f,a(a({ref:r},u),{},{components:n})):t.createElement(f,a({ref:r},u))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9866:function(e,r,n){n.r(r),n.d(r,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var t=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:3},l="Sensor",c={unversionedId:"Controllers/sensor",id:"Controllers/sensor",title:"Sensor",description:"This part allows you to put controllers to your API for sensors.",source:"@site/docs/Controllers/sensor.md",sourceDirName:"Controllers",slug:"/Controllers/sensor",permalink:"/HomeControl/docs/Controllers/sensor",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Controllers/sensor.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Actuator",permalink:"/HomeControl/docs/Controllers/actuator"},next:{title:"Middlewares",permalink:"/HomeControl/docs/category/middlewares"}},u={},p=[{value:"Usage",id:"usage",level:2},{value:"Get",id:"get",level:3},{value:"Get with ID",id:"get-with-id",level:3},{value:"Post",id:"post",level:3},{value:"Patch",id:"patch",level:3},{value:"Delete",id:"delete",level:3}],d={toc:p};function m(e){var r=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sensor"},"Sensor"),(0,s.kt)("p",null,"This part allows you to put controllers to your API for sensors."),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("h3",{id:"get"},"Get"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'get: async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const sensor = await Sensor.find();\n      const map = sensor.map((sensorTemp) => {\n        return {\n          id: sensorTemp._id,\n          type: sensorTemp.type,\n          designation: sensorTemp.designation,\n          rawValue: sensorTemp.rawValue,\n          value: convert(sensorTemp.type, sensorTemp.rawValue),\n        };\n      });\n      res.json(formatter("GET SENSOR", map));\n      return;\n    } catch (error) {\n      next(error);\n    }\n  },\n')),(0,s.kt)("h3",{id:"get-with-id"},"Get with ID"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'getWithId: async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const sensor = await Sensor.findOne({ _id: req.params.id });\n      res.json(formatter("GET SENSOR BY ID", sensor));\n      return;\n    } catch (error) {\n      next(error);\n    }q\n  },\n')),(0,s.kt)("h3",{id:"post"},"Post"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'post: async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const sensor = await Sensor.create({\n        type: xssVerify(req.body.type),\n        designation: xssVerify(req.body.designation),\n        rawValue: req.body.rawValue,\n      });\n      res.json(formatter("POST SENSOR", sensor));\n      return;\n    } catch (error) {\n      next(error);\n    }\n  },\n')),(0,s.kt)("h3",{id:"patch"},"Patch"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'patch: async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const sensor = await Sensor.updateOne(\n        { _id: req.params.id },\n        {\n          type: xssVerify(req.body.type),\n          designation: xssVerify(req.body.designation),\n          rawValue: req.body.rawValue,\n        }\n      );\n      res.json(formatter("PATCH SENSOR"));\n      return;\n    } catch (error) {\n      next(error);\n    }\n  },\n};\n')),(0,s.kt)("h3",{id:"delete"},"Delete"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'delete: async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      await Sensor.deleteOne({ _id: req.params.id });\n      res.json(formatter("DELETE SENSOR"));\n      return;\n    } catch (error) {\n      next(error);\n    }\n  },\n')))}m.isMDXComponent=!0}}]);